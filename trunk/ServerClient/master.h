// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __master_hh__
#define __master_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_master
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_master
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_master
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE consts

_CORBA_MODULE_BEG

  _CORBA_MODULE_VARINT const ::CORBA::ULong MAX_LEN _init_in_decl_( = 8U );

_CORBA_MODULE_END

_CORBA_MODULE master

_CORBA_MODULE_BEG

#ifndef __master_minstance__i__
#define __master_minstance__i__

  class instance_i;
  class _objref_instance_i;
  class _impl_instance_i;
  
  typedef _objref_instance_i* instance_i_ptr;
  typedef instance_i_ptr instance_iRef;

  class instance_i_Helper {
  public:
    typedef instance_i_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_instance_i, instance_i_Helper> instance_i_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_instance_i,instance_i_Helper > instance_i_out;

#endif

  typedef char* bounded_string_t;
  typedef ::CORBA::String_var bounded_string_t_var;
  typedef ::CORBA::String_out bounded_string_t_out;

  class octet_sequence_t_var;

  class octet_sequence_t : public _CORBA_Unbounded_Sequence_Octet {
  public:
    typedef octet_sequence_t_var _var_type;
    inline octet_sequence_t() {}
    inline octet_sequence_t(const octet_sequence_t& _s)
      : _CORBA_Unbounded_Sequence_Octet(_s) {}

    inline octet_sequence_t(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_Octet(_max) {}
    inline octet_sequence_t(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Octet* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_Octet(_max, _len, _val, _rel) {}

  

    inline octet_sequence_t& operator = (const octet_sequence_t& _s) {
      _CORBA_Unbounded_Sequence_Octet::operator=(_s);
      return *this;
    }
  };

  class octet_sequence_t_out;

  class octet_sequence_t_var {
  public:
    inline octet_sequence_t_var() : _pd_seq(0) {}
    inline octet_sequence_t_var(octet_sequence_t* _s) : _pd_seq(_s) {}
    inline octet_sequence_t_var(const octet_sequence_t_var& _s) {
      if( _s._pd_seq )  _pd_seq = new octet_sequence_t(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~octet_sequence_t_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline octet_sequence_t_var& operator = (octet_sequence_t* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline octet_sequence_t_var& operator = (const octet_sequence_t_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new octet_sequence_t;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline ::CORBA::Octet& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline octet_sequence_t* operator -> () { return _pd_seq; }
    inline const octet_sequence_t* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator octet_sequence_t& () const { return *_pd_seq; }
#else
    inline operator const octet_sequence_t& () const { return *_pd_seq; }
    inline operator octet_sequence_t& () { return *_pd_seq; }
#endif
      
    inline const octet_sequence_t& in() const { return *_pd_seq; }
    inline octet_sequence_t&       inout()    { return *_pd_seq; }
    inline octet_sequence_t*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline octet_sequence_t* _retn() { octet_sequence_t* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class octet_sequence_t_out;
    
  private:
    octet_sequence_t* _pd_seq;
  };

  class octet_sequence_t_out {
  public:
    inline octet_sequence_t_out(octet_sequence_t*& _s) : _data(_s) { _data = 0; }
    inline octet_sequence_t_out(octet_sequence_t_var& _s)
      : _data(_s._pd_seq) { _s = (octet_sequence_t*) 0; }
    inline octet_sequence_t_out(const octet_sequence_t_out& _s) : _data(_s._data) {}
    inline octet_sequence_t_out& operator = (const octet_sequence_t_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline octet_sequence_t_out& operator = (octet_sequence_t* _s) {
      _data = _s;
      return *this;
    }
    inline operator octet_sequence_t*&()  { return _data; }
    inline octet_sequence_t*& ptr()       { return _data; }
    inline octet_sequence_t* operator->() { return _data; }

    inline ::CORBA::Octet& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    octet_sequence_t*& _data;

  private:
    octet_sequence_t_out();
    octet_sequence_t_out& operator=(const octet_sequence_t_var&);
  };

  enum switch_t { vshort, vlong, vlong_long, vulong /*, __max_switch_t=0xffffffff */ };
  typedef switch_t& switch_t_out;

  class count_t {
  public:

    typedef _CORBA_ConstrType_Fix_Var<count_t> _var_type;

    

    count_t(): _pd__initialised(0) {
      _pd__default = 1;
      _pd__d = vulong;

  
    }
    
    count_t(const count_t& _value) {
      _pd__initialised = _value._pd__initialised;
      if ((_pd__default = _value._pd__default)) {
        ulong_value(_value._pd_ulong_value);
      }
      else {
        switch(_value._pd__d) {
          case vshort: short_value(_value._pd_short_value); break;

          case vlong: long_value(_value._pd_long_value); break;

          case vlong_long: long_long_value(_value._pd_long_long_value); break;

            default: break;

      
        }
      }
      _pd__d = _value._pd__d;

  
    }

    ~count_t() {}

    count_t& operator=(const count_t& _value) {
      _pd__initialised = _value._pd__initialised;
      if ((_pd__default = _value._pd__default)) {
        ulong_value(_value._pd_ulong_value);
      }
      else {
        switch(_value._pd__d) {
          case vshort: short_value(_value._pd_short_value); break;

          case vlong: long_value(_value._pd_long_value); break;

          case vlong_long: long_long_value(_value._pd_long_long_value); break;

            default: break;

      
        }
      }
      _pd__d = _value._pd__d;

  
      return *this;
    }

    switch_t _d() const { return _pd__d;}
    void _d(switch_t _value){
      // illegal to set discriminator before making a member active
      if (!_pd__initialised)
        OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);

      if (_value == _pd__d) return; // no change

      switch (_pd__d){
        case vshort: goto fail;
        case vlong: goto fail;
        case vlong_long: goto fail;
        default:
          switch (_value){

            case vshort: goto fail;
            case vlong: goto fail;
            case vlong_long: goto fail;
            default: _pd__d = _value; return;
          }


      };
      

      fail:
      OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);


  
    }

    

    ::CORBA::Short short_value () const { return _pd_short_value; }
    void short_value (::CORBA::Short  _value) {
      _pd__initialised = 1;
      _pd__d = vshort;
      _pd__default = 0;
      _pd_short_value = _value;
    }

    ::CORBA::Long long_value () const { return _pd_long_value; }
    void long_value (::CORBA::Long  _value) {
      _pd__initialised = 1;
      _pd__d = vlong;
      _pd__default = 0;
      _pd_long_value = _value;
    }

    ::CORBA::LongLong long_long_value () const { return _pd_long_long_value; }
    void long_long_value (::CORBA::LongLong  _value) {
      _pd__initialised = 1;
      _pd__d = vlong_long;
      _pd__default = 0;
      _pd_long_long_value = _value;
    }

    ::CORBA::ULong ulong_value () const { return _pd_ulong_value; }
    void ulong_value (::CORBA::ULong  _value) {
      _pd__initialised = 1;
      _pd__d = vulong;
      _pd__default = 1;
      _pd_ulong_value = _value;
    }

  
    
    void operator>>= (cdrStream&) const;
    void operator<<= (cdrStream&);

  private:
    switch_t _pd__d;
    _CORBA_Boolean _pd__default;
    _CORBA_Boolean _pd__initialised;

    union {
      ::CORBA::Short _pd_short_value;

      ::CORBA::Long _pd_long_value;

      ::CORBA::LongLong _pd_long_long_value;

      ::CORBA::ULong _pd_ulong_value;


    };

  
    
  };

  typedef count_t::_var_type count_t_var;

  typedef count_t& count_t_out;

  struct request_t {
    typedef _CORBA_ConstrType_Variable_Var<request_t> _var_type;

    
    count_t index;

    ::CORBA::Any data;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef request_t::_var_type request_t_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< request_t,request_t_var > request_t_out;

#ifndef __master_mserver__i__
#define __master_mserver__i__

  class server_i;
  class _objref_server_i;
  class _impl_server_i;
  
  typedef _objref_server_i* server_i_ptr;
  typedef server_i_ptr server_iRef;

  class server_i_Helper {
  public:
    typedef server_i_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_server_i, server_i_Helper> server_i_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_server_i,server_i_Helper > server_i_out;

#endif

  // interface server_i
  class server_i {
  public:
    // Declarations for this interface type.
    typedef server_i_ptr _ptr_type;
    typedef server_i_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    class connection_e : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member cause;

    

      inline connection_e() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      connection_e(const connection_e&);
      connection_e(const char* i_cause);
      connection_e& operator=(const connection_e&);
      virtual ~connection_e();
      virtual void _raise() const;
      static connection_e* _downcast(::CORBA::Exception*);
      static const connection_e* _downcast(const ::CORBA::Exception*);
      static inline connection_e* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

  
  };

  class _objref_server_i :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    ::CORBA::Short ping(::CORBA::Short val);
    instance_i_ptr connect(::CORBA::String_INOUT_arg peer, ::CORBA::LongLong& key);

    inline _objref_server_i()  { _PR_setobj(0); }  // nil
    _objref_server_i(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_server_i();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_server_i(const _objref_server_i&);
    _objref_server_i& operator = (const _objref_server_i&);
    // not implemented

    friend class server_i;
  };

  class _pof_server_i : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_server_i() : _OMNI_NS(proxyObjectFactory)(server_i::_PD_repoId) {}
    virtual ~_pof_server_i();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_server_i :
    public virtual omniServant
  {
  public:
    virtual ~_impl_server_i();

    virtual ::CORBA::Short ping(::CORBA::Short val) = 0;
    virtual instance_i_ptr connect(char*& peer, ::CORBA::LongLong& key) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


#ifndef __master_minstance__i__
#define __master_minstance__i__

  class instance_i;
  class _objref_instance_i;
  class _impl_instance_i;
  
  typedef _objref_instance_i* instance_i_ptr;
  typedef instance_i_ptr instance_iRef;

  class instance_i_Helper {
  public:
    typedef instance_i_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_instance_i, instance_i_Helper> instance_i_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_instance_i,instance_i_Helper > instance_i_out;

#endif

  // interface instance_i
  class instance_i {
  public:
    // Declarations for this interface type.
    typedef instance_i_ptr _ptr_type;
    typedef instance_i_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    class protocol_e : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member cause;

    

      inline protocol_e() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      protocol_e(const protocol_e&);
      protocol_e(const char* i_cause);
      protocol_e& operator=(const protocol_e&);
      virtual ~protocol_e();
      virtual void _raise() const;
      static protocol_e* _downcast(::CORBA::Exception*);
      static const protocol_e* _downcast(const ::CORBA::Exception*);
      static inline protocol_e* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

  
  };

  class _objref_instance_i :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    void get_status(const char* s_key, ::master::count_t& cnt, ::master::octet_sequence_t_out status);
    ::CORBA::Boolean request(const ::master::request_t& req);
    void disconnect();
    ::CORBA::Boolean idle();
    ::CORBA::Boolean ready();
    void ready(::CORBA::Boolean _v);

    inline _objref_instance_i()  { _PR_setobj(0); }  // nil
    _objref_instance_i(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_instance_i();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_instance_i(const _objref_instance_i&);
    _objref_instance_i& operator = (const _objref_instance_i&);
    // not implemented

    friend class instance_i;
  };

  class _pof_instance_i : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_instance_i() : _OMNI_NS(proxyObjectFactory)(instance_i::_PD_repoId) {}
    virtual ~_pof_instance_i();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_instance_i :
    public virtual omniServant
  {
  public:
    virtual ~_impl_instance_i();

    virtual void get_status(const char* s_key, ::master::count_t& cnt, ::master::octet_sequence_t_out status) = 0;
    virtual ::CORBA::Boolean request(const ::master::request_t& req) = 0;
    virtual void disconnect() = 0;
    virtual ::CORBA::Boolean idle() = 0;
    virtual ::CORBA::Boolean ready() = 0;
    virtual void ready(::CORBA::Boolean _v) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


_CORBA_MODULE_END



_CORBA_MODULE POA_consts
_CORBA_MODULE_BEG

_CORBA_MODULE_END

_CORBA_MODULE POA_master
_CORBA_MODULE_BEG

  class server_i :
    public virtual master::_impl_server_i,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~server_i();

    inline ::master::server_i_ptr _this() {
      return (::master::server_i_ptr) _do_this(::master::server_i::_PD_repoId);
    }
  };

  class instance_i :
    public virtual master::_impl_instance_i,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~instance_i();

    inline ::master::instance_i_ptr _this() {
      return (::master::instance_i_ptr) _do_this(::master::instance_i::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_consts
_CORBA_MODULE_BEG

_CORBA_MODULE_END

_CORBA_MODULE OBV_master
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(master::switch_t _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (master::switch_t& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= master::vulong) {
    _e = (master::switch_t) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}



inline void
master::server_i::_marshalObjRef(::master::server_i_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
master::instance_i::_marshalObjRef(::master::instance_i_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_master
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_master
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_master
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_master
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_master
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_master
#endif

#endif  // __master_hh__

